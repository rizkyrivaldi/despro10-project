#include <WiFi.h>

// Wifi Setup
const char* ssid = "DFortress_Micro";
const char* password = "darkwingxmod";
String serverName = "192.168.2.10";
String serverPath = "/upload.php";
const int serverPort = 8888;

byte picture[] = {
  0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
  0x00, 0x06, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x05, 0x05, 0x06, 0x09,
  0x06, 0x05, 0x06, 0x09, 0x0B, 0x08, 0x06, 0x06, 0x08, 0x0B, 0x0C, 0x0A,
  0x0A, 0x0B, 0x0A, 0x0A, 0x0C, 0x10, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x10, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x07, 0x07,
  0x07, 0x0D, 0x0C, 0x0D, 0x18, 0x10, 0x10, 0x18, 0x14, 0x0E, 0x0E, 0x0E,
  0x14, 0x14, 0x0E, 0x0E, 0x0E, 0x0E, 0x14, 0x11, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x11, 0x11, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x11, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x08, 0x00, 0x08, 0x03,
  0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00,
  0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFF, 0xC4, 0x00, 0x20, 0x10,
  0x00, 0x01, 0x03, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x04, 0x12, 0x05, 0x06, 0x14, 0x01,
  0x13, 0x16, 0x23, 0x24, 0x26, 0xFF, 0xC4, 0x00, 0x14, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xC4, 0x00, 0x14, 0x11, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11,
  0x00, 0x3F, 0x00, 0x55, 0x6B, 0x1A, 0xEA, 0xB6, 0x31, 0x4B, 0x99, 0xC5,
  0x68, 0x07, 0x9F, 0xAE, 0xA8, 0xD4, 0xC3, 0xA3, 0xA2, 0x12, 0xD3, 0xB5,
  0xBE, 0x3D, 0x38, 0x4D, 0xE4, 0x55, 0xC5, 0x1E, 0x5B, 0x33, 0x75, 0xC1,
  0x10, 0xBF, 0xA2, 0x57, 0x62, 0xC3, 0xFF, 0xD9
};

WiFiClient client;

void setup() {
  // put your setup code here, to run once:
  initWifi();
  uploadPhoto();
}

void loop() {
  // put your main code here, to run repeatedly:

}

void initWifi(){
  WiFi.mode(WIFI_STA);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("ESP32-CAM IP Address: ");
  Serial.println(WiFi.localIP());
}

void uploadPhoto(){
  String getAll;
  String getBody;

  if (client.connect(serverName.c_str(), serverPort)){

    Serial.println("Connection successful!");    
    String head = "--ThisIsABoundary\r\nContent-Disposition: form-data; name=\"imageFile\"; filename=\"esp32-cam.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n";
    String tail = "\r\n--ThisIsABoundary--\r\n";

    uint32_t imageLen = sizeof(picture);
    uint32_t extraLen = head.length() + tail.length();
    uint32_t totalLen = imageLen + extraLen;

    client.print("POST " + serverPath + " HTTP/1.1\r\n");
    client.print("Host: " + serverName + "\r\n");
    client.print("Content-Length: " + String(totalLen) + "\r\n");
    client.print("Content-Type: multipart/form-data; boundary=ThisIsABoundary\r\n");
    client.print("\r\n");
    client.print(head);

    uint8_t *fbBuf = picture;
    size_t fbLen = sizeof(picture);
    for (size_t n=0; n<fbLen; n=n+1024) {
      if (n+1024 < fbLen) {
        client.write(fbBuf, 1024);
        fbBuf += 1024;
      }
      else if (fbLen%1024>0) {
        size_t remainder = fbLen%1024;
        client.write(fbBuf, remainder);
      }
    }   
    client.print(tail);

    // Waiting for response from the php server
    int timeoutTimer = 10000;
    long startTimer = millis();
    bool state = false;
    bool feedback = false;

    Serial.println("\r\nWaiting for server response...");
    while((startTimer + timeoutTimer) > millis()){
      Serial.print(".");
      delay(100);
      while(client.available()){
        char c = client.read();
        if (c == '\n'){
          if (getAll.length()==0){
            state = true;
          }

          getAll = "";
        }

        else if (c != '\r'){
          getAll += String(c);
        }

        if (state == true){
          getBody += String(c);
        }

        startTimer = millis();
      }

      if (getBody.length() > 0){
        feedback = true;
        break;
      }

    }
    Serial.println();
    client.stop();
    Serial.println(getBody);
  }

}
